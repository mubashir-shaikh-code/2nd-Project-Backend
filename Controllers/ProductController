// Controllers/ProductController.js
const db = require("../db"); // ✅ MySQL connection

// ==================== PRODUCTS ====================

// Get all approved products (with SQL pagination)
const getAllProducts = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1; // Current page
    const limit = parseInt(req.query.limit) || 10; // Items per page
    const offset = (page - 1) * limit; // SQL OFFSET

    const [products] = await db.query(
      "SELECT * FROM products WHERE status = 'approved' ORDER BY id DESC LIMIT ? OFFSET ?",
      [limit, offset]
    );

    const [count] = await db.query(
      "SELECT COUNT(*) as total FROM products WHERE status = 'approved'"
    );

    const formatted = products.map((p) => ({
      _id: p.id,
      id: p.id,
      description: p.description,
      price: p.price,
      image: p.image,
      category: p.category,
      status: p.status,
      userId: p.userId,
      userEmail: p.userEmail,
    }));

    res.status(200).json({
      products: formatted,
      totalProducts: count[0].total,
      page,
      totalPages: Math.ceil(count[0].total / limit),
    });
  } catch (err) {
    console.error("Error fetching products:", err);
    res.status(500).json({ error: "Server Error" });
  }
};

// ✅ Get products by logged-in user
const getUserProducts = async (req, res) => {
  try {
    const userId = req.user.id;
    const [products] = await db.query(
      "SELECT * FROM products WHERE userId = ?",
      [userId]
    );

    const formatted = Array.isArray(products)
      ? products.map((p) => ({
          _id: p.id,
          id: p.id,
          description: p.description,
          price: p.price,
          image: p.image,
          category: p.category,
          status: p.status,
          userId: p.userId,
          userEmail: p.userEmail,
        }))
      : [];

    res.json(formatted);
  } catch (err) {
    console.error("Error fetching user products:", err);
    res.status(500).json({ error: "Server error" });
  }
};

// ✅ Get pending products (admin only)
const getPendingProducts = async (req, res) => {
  try {
    const [pendingProducts] = await db.query(
      "SELECT * FROM products WHERE status = 'pending' ORDER BY id DESC"
    );

    const formatted = Array.isArray(pendingProducts)
      ? pendingProducts.map((p) => ({
          _id: p.id,
          id: p.id,
          description: p.description,
          price: p.price,
          image: p.image,
          category: p.category,
          status: p.status,
          userId: p.userId,
          userEmail: p.userEmail,
        }))
      : [];

    res.status(200).json(formatted);
  } catch (err) {
    console.error("Error fetching pending products:", err);
    res.status(500).json({ error: "Server Error" });
  }
};

// ✅ Approve product
const approveProduct = async (req, res) => {
  try {
    const { id } = req.params;
    const [result] = await db.query(
      "UPDATE products SET status = 'approved' WHERE id = ?",
      [id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Product not found" });
    }

    res.status(200).json({ success: true, message: "Product approved", id });
  } catch (err) {
    console.error("Error approving product:", err);
    res.status(500).json({ error: "Server error while approving product" });
  }
};

// ✅ Reject/Delete a product
const rejectProduct = async (req, res) => {
  try {
    const { id } = req.params;
    const [result] = await db.query("DELETE FROM products WHERE id = ?", [id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Product not found" });
    }

    res.status(200).json({
      success: true,
      message: "Product rejected and removed",
      id,
    });
  } catch (err) {
    console.error("Error rejecting product:", err);
    res.status(500).json({ error: "Server error while rejecting product" });
  }
};

// ✅ Post a new product
const postProduct = async (req, res) => {
  try {
    const { description, price, image, category } = req.body;
    const userId = req.user.id; // from token
    const userEmail = req.user.email;

    if (!description || !price || !image || !category) {
      return res.status(400).json({ error: "All fields are required" });
    }

    const finalImage = image; // base64 or URL

    const [result] = await db.query(
      "INSERT INTO products (description, price, image, category, userId, userEmail, status) VALUES (?, ?, ?, ?, ?, ?, 'pending')",
      [description, price, finalImage, category, userId, userEmail]
    );

    res.status(201).json({
      success: true,
      message: "Product submitted for approval",
      id: result.insertId,
      _id: result.insertId,
    });
  } catch (err) {
    console.error("Error posting product:", err);
    res.status(500).json({ error: "Server error while posting product" });
  }
};

// ✅ Delete product (user)
const deleteProduct = async (req, res) => {
  try {
    const productId = req.params.id;
    const [result] = await db.query("DELETE FROM products WHERE id = ?", [
      productId,
    ]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Product not found" });
    }

    res.status(200).json({
      success: true,
      message: "Product deleted",
      id: productId,
      _id: productId,
    });
  } catch (err) {
    console.error("Error deleting product:", err);
    res.status(500).json({ message: "Failed to delete product" });
  }
};

// ✅ Update product (user)
const updateProduct = async (req, res) => {
  try {
    const productId = req.params.id;
    const { description, price, image, category } = req.body;

    const [result] = await db.query(
      "UPDATE products SET description=?, price=?, image=?, category=? WHERE id=?",
      [description, price, image, category, productId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "Product not found" });
    }

    res.status(200).json({
      success: true,
      message: "Product updated",
      id: productId,
      _id: productId,
    });
  } catch (err) {
    console.error("Error updating product:", err);
    res.status(500).json({ message: "Server error" });
  }
};

// ==================== REVIEWS ====================

// ✅ Add review and return updated reviews
const addReview = async (req, res) => {
  try {
    const { productId, rating, review } = req.body;
    const userId = req.user.id;

    if (!productId || !rating) {
      return res.status(400).json({ error: "Product ID and rating required" });
    }

    await db.query(
      "INSERT INTO reviews (productId, userId, rating, review) VALUES (?, ?, ?, ?)",
      [productId, userId, rating, review]
    );

    // ✅ Fetch updated reviews
    const [reviews] = await db.query(
      `SELECT r.*, u.username 
       FROM reviews r 
       JOIN users u ON r.userId = u.id 
       WHERE r.productId = ? 
       ORDER BY r.createdAt DESC`,
      [productId]
    );

    res.status(201).json(Array.isArray(reviews) ? reviews : []);
  } catch (err) {
    console.error("Error adding review:", err);
    res.status(500).json({ reviews: [] });
  }
};

// ✅ Get reviews for a product (always array)
const getProductReviews = async (req, res) => {
  try {
    const { productId } = req.params;

    const [reviews] = await db.query(
      `SELECT r.*, u.username 
       FROM reviews r 
       JOIN users u ON r.userId = u.id 
       WHERE r.productId = ? 
       ORDER BY r.createdAt DESC`,
      [productId]
    );

    res.status(200).json(Array.isArray(reviews) ? reviews : []);
  } catch (err) {
    console.error("Error fetching reviews:", err);
    res.status(500).json({ reviews: [] });
  }
};

module.exports = {
  getAllProducts,
  getPendingProducts,
  approveProduct,
  deleteProduct,
  rejectProduct,
  postProduct,
  updateProduct,
  getUserProducts,
  addReview,
  getProductReviews,
};
